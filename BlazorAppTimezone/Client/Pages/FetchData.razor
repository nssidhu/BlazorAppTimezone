@page "/fetchdata"
@using BlazorAppTimezone.Shared
@inject HttpClient Http
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@using System.Net
@using System.Text

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

 <div class="row">
    <div class="col col-auto">
        <div class="form-group">
            <label for="firstName" class="control-label">Enter Time zone</label>
          
             <input type="text"  id="firstName" class="form-control" @bind="@_timeZone"/>
           
            @*<input id="firstName" type="text" name="firstname" placeholder="First Name" class="form-control" style="width:25ch;">*@
        </div>
    </div>
</div>
<span><b>TimeZone DisplayName : </b></span><span>@timeZoneDettail?.TimeZoneDisplayName</span>
<br />
<span><b>TimeZone Name : </b></span><span>@timeZoneDettail?.TimeZoneName</span>
<br />
<span><b>Converted TimeZone : </b></span><span>@timeZoneDettail?.ConvertedTimezone</span>
<br />
<span><b>Timezone ID : </b></span><span>@timeZoneDettail?.TimezoneID</span>
<br />
<span><b>Time at Time Zone : </b></span><span>@timeZoneDettail?.TimeAtTimezone</span>
<br />
<span><b>UTC Time : </b></span><span>@timeZoneDettail?.UTCTime</span>

<br/>
<br />
<button class="btn btn-primary" @onclick="GetData">Get New Value</button>

@if(!string.IsNullOrEmpty(_errorMessage))
{
  <div class="alert alert-danger" role="alert">
   @_errorMessage
  </div>
}


@code {
    private WeatherForecast[]? forecasts;
    private TimezoneDetails? timeZoneDettail = new TimezoneDetails();
    private string _timeZone = "America/Chicago";
    private string _errorMessage = "";

    private async Task PostData()
    {
        //This is sample method not used anywhere

         var jsonSerializerOptions
                        = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                        };

         var jsonContent = JsonSerializer.Serialize(timeZoneDettail, jsonSerializerOptions);
        using var httpContent = new StringContent  (jsonContent, Encoding.UTF8, "application/json");
 
        using var response = await Http.PostAsync("posts", httpContent);
    }

    private async Task GetData()
    {
        try
        {
            _errorMessage = "";
            var _escapedTimezone = Uri.EscapeDataString(_timeZone);

            //timeZoneDettail = await Http.GetFromJsonAsync<TimezoneDetails>($"/api/WeatherForecast/GetTimeZonetime/{_escapedTimezone}");

            using var httpResponse = await Http.GetAsync($"/api/WeatherForecast/GetTimeZonetime/{_escapedTimezone}");

            if (httpResponse.IsSuccessStatusCode)
            {
                //Blazor does return 200 for routes that does not exists, in that case it returns HTML and not json
                //We are dtectecting to make sure we did recieve json object in our 200 OK response
                if (httpResponse.Content is object && httpResponse.Content.Headers.ContentType.MediaType == "application/json")
                {
                    //In case you need to have control over deserilization use the following
                    // var content = await httpResponse.Content.ReadAsStringAsync();
                    var jsonSerializerOptions
                        = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                        };

                    //timeZoneDettail = JsonSerializer.Deserialize<TimezoneDetails>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })
                    //timeZoneDettail = JsonSerializer.Deserialize<TimezoneDetails>(content, jsonSerializerOptions)

                    timeZoneDettail = await httpResponse.Content.ReadFromJsonAsync<TimezoneDetails>();
                }
                else
                {
                    _errorMessage = "Route Not Found";
                }

            }
            else
            {
                //In case you want greater control over status code use the following
                //var statusCode = httpResponse.StatusCode;
                //switch (statusCode)
                //{
                //    case HttpStatusCode.NotFound:
                //        Console.WriteLine("Not Found Error");
                //            //_navManager.NavigateTo("/404"); 
                //            break;
                //        case HttpStatusCode.Unauthorized: 
                //         Console.WriteLine("unauthorized");
                //            //_navManager.NavigateTo("/unauthorized"); 
                //            break;
                //        default: 
                //          Console.WriteLine("500 error");
                //            //_navManager.NavigateTo("/500"); 
                //            break;
                //    }
                var error  = await httpResponse.Content.ReadFromJsonAsync<CustomError>();
                _errorMessage = error.Message;

            }

        }
        catch(Exception e)
        {
            _errorMessage = e.GetBaseException().ToString();
        }
        finally
        {
             StateHasChanged();
        }

       
    }
    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        //timeZoneDettail = await Http.GetFromJsonAsync<TimezoneDetails>($"WeatherForecast");
        await GetData();
    }
}
